

---------------------------------------------------------------------------------------------------------------------------------
ERROR_ENTRY(100, "[PARM]: Параметр -in должен быть задан") 
	Как вызвать понятно :)
ERROR_ENTRY(104, "[PARM]: Превышена длина входного параметра") 
	Как вызвать понятно :)
---------------------------------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------------------------------
ERROR_ENTRY(110, "[IN]: Ошибка при открытии файла с исходным кодом (-in)") 
	Если траблы с файликом
ERROR_ENTRY(111, "[IN]: Ошибка при чтении файла с исходным кодом (-in)") 
	Ошибка в синтаксисе, но не в синтаксисе языка, а в синтаксисе самого файла
ERROR_ENTRY(112, "[IN]: Превышен предел размера входного файла (-in)") 
	Если файл слишком большой
ERROR_ENTRY(113, "[IN]: Превышен предел размера лексемы")
	Например:
	declare uint demosadsskfndlnfkldnfkldndsfdfdjnskndskjd;
	demosadsskfndlnfkldnfkldndsfdfdjnskndskjd = 32;
ERROR_ENTRY(114, "[IN]: Отсуствует закрывающая кавычка") 
	В любом случае вызывается 116
ERROR_ENTRY(115, "[IN]: Входная строка превышает максимальный размер") 
	Как вызвать понятно :)
ERROR_ENTRY(116, "[IN]: Количество открывающих фигурных скобок не совпадает с количеством закрывающих") 
	Как вызвать понятно :)
---------------------------------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------------------------------
ERROR_ENTRY(120, "[LA]: Ошибка при разборе токена")
	Например, при вызове сделать number1 = GetHours(1);
ERROR_ENTRY(121, "[LA]: Используется необъявленный идентификатор")
	Например, при вызове сделать number5 = GetHours(1) (number5 - необъявленный идентификатор)
ERROR_ENTRY(122, "[LA]: Идентификатор не имеет типа")
	Например, declare number5;
ERROR_ENTRY(124, "[LA]: Отсутствует точка входа")
	Как вызвать понятно :)
ERROR_ENTRY(125, "[LA]: Обнаружена вторая точка входа")
	Как вызвать понятно :)
---------------------------------------------------------------------------------------------------------------------------------
	
---------------------------------------------------------------------------------------------------------------------------------
ERROR_ENTRY(130, "[ITable]: Ошибка создания таблицы идентификаторов: размер превышает допустимое значение")
ERROR_ENTRY(131, "[LTable]: Ошибка создания таблицы литералов: размер превышает допустимое значение")
ERROR_ENTRY(132, "[ITable]: Ошибка добавления в таблицу лексем: превышен макимальный размер таблицы")
ERROR_ENTRY(133, "[LTable]: Ошибка добавления в таблицу идентификаторов: превышен макимальный размер таблицы")
ERROR_ENTRY(134, "[ITable]: Ошибка получения элемента из таблицы идентификаторов: элемент не создан или индекс выходит за границы массива")
ERROR_ENTRY(135, "[LTable]: Ошибка получения элемента из таблицы литералов: элемент не создан или индекс выходит за границы массива")
---------------------------------------------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------------------------------------------
ERROR_ENTRY(600, "[Syntaxis]: Неверная структура программы")
ERROR_ENTRY(601, "[Syntaxis]: Ошибочный оператор")
ERROR_ENTRY(602, "[Syntaxis]: Ошибка в выражении")
ERROR_ENTRY(603, "[Syntaxis]: Ошибка в параметрах функции")
ERROR_ENTRY(604, "[Syntaxis]: Ошибка в параметрах вызываемой функции")
ERROR_ENTRY(605, "[Syntaxis]: Ошибка знака в выражении")
ERROR_ENTRY(606, "[Syntaxis]: Ошибка синтаксического анализа")
ERROR_ENTRY(607, "[Syntaxis]: Ошибка условной конструкции")
ERROR_ENTRY(609, "[Syntaxis]: Обнаружена синтаксическая ошибка (смотри журнал Log)")
	При любой ошибке в логике выражения и не только
	--> вообще, при любой ошибке, не важно где, идёт вызов 609
---------------------------------------------------------------------------------------------------------------------------------
	
---------------------------------------------------------------------------------------------------------------------------------
ERROR_ENTRY(700, "[Semantic]: Повторное объявление идентификатора")
	Например:
	declare uint number;
	declare uint number;
ERROR_ENTRY(701, "[Semantic]: Ошибка в возвращаемом значении")
	Например:
	while(a>1)
	[
	answer = answer*a;
	a = a - 1;
	];
	return "answer";
	};
ERROR_ENTRY(702, "[Semantic]: Ошибка в передаваемых значениях в функции: количество параметров не совпадает")
ERROR_ENTRY(703, "[Semantic]: Ошибка в передаваемых значениях в функции: типы параметров не совпадают")
	Например:
	extern uint function GetMonth(uint a);
	number4 = GetMonth(1,1);
ERROR_ENTRY(704, "[Semantic]: Нарушены типы данных в выражении")
ERROR_ENTRY(705, "[Semantic]: Ошибка экспорта: в библиотеке нет такой функции")
	Например:
	extern uint function GetDat(uint a);
ERROR_ENTRY(706, "[Semantic]: Ошибка экспорта: неверные параметры")
	Например:
	extern uint function GetHours(uint a, uint b);
	number1 = GetHours(1);
ERROR_ENTRY(707, "[Semantic]: Ошибка экспорта: ошибочный тип возвращаемого значения")
ERROR_ENTRY(708, "[Semantic]: Ошибочный оператор: строки можно только складывать")
ERROR_ENTRY(709, "[Semantic]: Ошибочные параметры условной конструкции: строки не могут быть параметрами условной конструкции")
ERROR_ENTRY(710, "[Semantic]: Ошибочный опреатор: для типа char разрешены только операции + и -")
---------------------------------------------------------------------------------------------------------------------------------